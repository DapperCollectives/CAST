name: UPDATE STAGE

on:
  # Trigger the workflow on push or pull request merge
  push:
    branches:
      - staging

env:
  db_username: ${{ secrets.DB_USERNAME }}
  db_password: ${{ secrets.DB_PASSWORD }}
  db_hostname: ${{ secrets.DB_HOSTNAME }}
  db_port: ${{ secrets.DB_PORT }}
  db_name: ${{ secrets.DB_NAME }}
  dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
  dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
  argo_repo: ${{ secrets.ARGO_REPO }}
  argo_ref: ${{ secrets.ARGO_REF }}
  argo_token: ${{ secrets.ARGO_TOKEN }}
  backend_api: ${{ secrets.BACKEND_API }}
  tx_options: ${{ secrets.TX_OPTIONS }}

jobs:

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  MIGRATIONS
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  migrations:
    name: Migrations
    runs-on: self-hosted
    if: "!contains(github.event.head_commit.message, 'cancel migrations')"
    steps:

    - name: checkout
      uses: actions/checkout@v3
      with:
        ref: staging
    
    - name: Install and run migrations
      run: |
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.2/migrate.linux-amd64.tar.gz | tar xvz && sudo mv migrate /usr/local/bin && sudo chmod +x /usr/local/bin/migrate
        sudo migrate -path ./backend/migrations -database 'postgres://${{ env.db_username }}:${{ env.db_password }}@${{ env.db_hostname }}:${{ env.db_port }}/${{ env.db_name }}?sslmode=disable' -verbose up

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  BUILD AND PUSH BACKEND STAGE
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  build-and-push-backend:
    name: Build and push backend
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, 'cancel build backend')"
    steps:

    - name: checkout
      uses: actions/checkout@v3
      with:
        ref: staging

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.dockerhub_username }}
        password: ${{ env.dockerhub_token }}

    - name: Get short SHA
      id: short
      run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"

    - name: build and push backend - stage -
      env:
        TAG: ${{ steps.short.outputs.sha7 }}
      run: |
        cd backend && docker build . -t bruddev/cast-stage:$TAG-be && docker push bruddev/cast-stage:$TAG-be

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  BUILD AND PUSH FRONTEND STAGE
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  build-and-push-frontend:
    name: Build and push frontend
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, 'cancel build frontend')"
    steps:

    - name: checkout
      uses: actions/checkout@v3
      with:
        ref: staging

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.dockerhub_username }}
        password: ${{ env.dockerhub_token }}

    - name: Get short SHA
      id: short
      run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"

    - name: build and push frontend - stage -
      env:
        TAG: ${{ steps.short.outputs.sha7 }}
      run: |
        cd frontend && sed -i 's/REPLACE_BACKEND/${{ env.backend_api }}/g' Dockerfile.stage'
        sed -i 's/REPLACE_TX/${{ env.tx_options }}/g' Dockerfile.stage'
        docker build -f Dockerfile.stage . -t bruddev/cast-stage:$TAG-fe
        docker push bruddev/cast-stage:$TAG-fe

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  UPDATE STAGE BACKEND ENVIRONMENT - ARGO TIME!
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  update-stage-via-argocd-backend:
    name: ArgoCD update Stage backend
    runs-on: ubuntu-20.04
    needs: build-and-push-backend
    steps:

    - name: Clone ArgoManifests
      run: |
        mkdir -p ./argo

    - name: Checkout ArgoManifests
      uses: actions/checkout@v3
      with:
        repository: ${{ env.argo_repo }}
        ref: ${{ env.argo_ref }}
        token: ${{ env.argo_token }}
        path: ./argo

    - name: time
      id: time
      run: echo "::set-output name=time::$(date "+%T")"

    - name: Get short SHA
      id: short
      run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"

    - name: Install Kustomize and update tag
      env:
        TIME: ${{ steps.time.outputs.time }}
        TAG: ${{ steps.short.outputs.sha7 }}
      run: |
        curl -fL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.5.5/kustomize_v4.5.5_linux_amd64.tar.gz| tar xz && \
        chmod +x kustomize
        cd ./argo/voting-tool-stage-prod/backend/environments/stage && kustomize edit set image bruddev/cast-stage:$TAG-be
        git config --global user.email "brunkins@brudfyi.com"
        git config --global user.name "Brunkins" 
        git commit -am "Added New Value From GHA $TIME" && git push

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  UPDATE STAGE FRONTEND ENVIRONMENT - ARGO TIME!
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  update-stage-via-argocd-frontend:
    name: ArgoCD update Stage frontend
    runs-on: ubuntu-20.04
    needs: build-and-push-frontend
    steps:

    - name: Clone ArgoManifests
      run: |
        mkdir -p ./argo

    - name: Checkout ArgoManifests
      uses: actions/checkout@v3
      with:
        repository: ${{ env.argo_repo }}
        ref: ${{ env.argo_ref }}
        token: ${{ env.argo_token }}
        path: ./argo

    - name: time
      id: time
      run: echo "::set-output name=time::$(date "+%T")"

    - name: Get short SHA
      id: short
      run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"

    - name: Install Kustomize and update tag
      env:
        TIME: ${{ steps.time.outputs.time }}
        TAG: ${{ steps.short.outputs.sha7 }}
      run: |
        curl -fL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.5.5/kustomize_v4.5.5_linux_amd64.tar.gz| tar xz && \
        chmod +x kustomize
        cd ./argo/voting-tool-stage-prod/frontend/environments/stage && kustomize edit set image bruddev/cast-stage:$TAG-fe
        git config --global user.email "brunkins@brudfyi.com"
        git config --global user.name "Brunkins" 
        git commit -am "Added New Value From GHA $TIME" && git push